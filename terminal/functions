#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_" || exit;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function localip() {
	ifconfig en0 | grep inet | awk '$1=="inet" {print $2}';
}

function publicip() {
	echo "Public IPv4: $( publicipv4 )";
	echo "Public IPv6: $( publicipv6 )";
}

function publicipv4() {
	dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com;
}

function publicipv6() {
	dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com;
}

# Run linux container with X11 forwarding
function podmanrungui() {
	echo "Checking: XQuartz -> Preferences -> Security -> Allow connections from network clients";
	if [ "$(defaults read org.xquartz.X11 nolisten_tcp)" != "0" ]; then
		echo "Closing XQuartz to update setting";
		osascript -e 'quit app "XQuartz"';
		defaults write org.xquartz.X11 nolisten_tcp 0;
		echo "Updated: XQuartz -> Preferences -> Security -> Allow connections from network clients";
	fi

	echo "";
	echo "Opening XQuartz";
	open -a /Applications/Utilities/XQuartz.app/;

	echo "";
	echo "Starting podman machine";
	podman machine start;

	echo "";
	echo "Executing: podman run -e DISPLAY=$(localip):0 -e XAUTHORITY=/.Xauthority -v ~/.Xauthority:/.Xauthority $*";
	podman run \
		-e DISPLAY="$(localip)":0 \
		-e XAUTHORITY=/.Xauthority \
		-v ~/.Xauthority:/.Xauthority \
		"$@";
}
